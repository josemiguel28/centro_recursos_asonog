<?phpnamespace Model;class Usuario extends ActiveRecord{    // base de datos     protected static $tabla = 'usuarios';    protected static $columnasDB = ['id', 'correo', 'contrasena', 'nombre', 'apellido', 'telefono', 'estado', 'rol', "confirmado", 'token'];    public $id;    public $correo;    public $contrasena;    public $nombre;    public $apellido;    public $telefono;    public $estado;    public $rol;    public $confirmado;    public $token;    public function __construct($args = [])    {        $this->id = $args['id'] ?? null;        $this->correo = isset($args['correo']) ? trim($args['correo']) : '';        $this->contrasena = $args['contrasena'] ?? '';        $this->nombre = $args['nombre'] ?? '';        $this->apellido = $args['apellido'] ?? '';        $this->telefono = $args['telefono'] ?? '';        $this->estado = $args['estado'] ?? "INA";        $this->rol = $args['rol'] ?? "";        $this->confirmado = $args['confirmado'] ?? "0";        $this->token = $args['token'] ?? '';    }    //mensajes de validacion para la creacion de cuenta    /*    public function validarDatosNuevaCuenta(): array    {        if (!$this->nombre) {            self::$alertas['error'][] = 'El nombre es obligatorio';        }        if (!$this->apellido) {            self::$alertas['error'][] = 'El apellido es obligatorio';        }        if (!$this->correo) {            self::$alertas['error'][] = 'El correo es obligatorio';        }        if (!$this->telefono) {            self::$alertas['error'][] = 'El telefono es obligatorio';        }        if (!$this->contrasena) {            self::$alertas['error'][] = 'La contraseña es obligatoria';        }        if (strlen($this->contrasena) < 6) {            self::$alertas['error'][] = 'La contraseña debe tener al menos 6 caracteres';        }        return self::$alertas;    }*/    public static function getAllUsers(){        $query = "select                     usuarios.id,                    usuarios.correo,                    concat (usuarios.nombre, ' ', usuarios.apellido) nombre,                     usuarios.telefono,                     usuarios.estado,                     roles.nombre rol,                     date(usuarios.fecha_creacion) token,                    usuarios.confirmado                                          from usuarios                                        join roles on roles.id = usuarios.rol order by usuarios.id desc                    ;";        return Usuario::SQL($query);    }    public function generarContrasenaTemporal($longitud = 5) {        // Conjunto de caracteres que se utilizarán para la contraseña        $caracteres = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';        $longitudCaracteres = strlen($caracteres);        $contrasena = '';        // Generar cada carácter de la contraseña        for ($i = 0; $i < $longitud; $i++) {            $contrasena .= $caracteres[rand(0, $longitudCaracteres - 1)];        }        $this->contrasena = $contrasena;        return $contrasena;    }    public function validarcorreo(): array    {        if (!$this->correo) {            self::$alertas['error'][] = 'El correo es obligatorio';        }        return self::$alertas;    }    //validar contraseña cuando el usuario quiere cambiar su contraseña    public function validarPassword($crrtnPassword): array    {        if (!$this->contrasena) {            self::$alertas['error'][] = 'La contraseña es obligatoria';        }        if (strlen($this->contrasena) < 6) {            self::$alertas['error'][] = 'La contraseña debe tener al menos 6 caracteres';        }        if (password_verify($crrtnPassword, $this->contrasena)) {            self::$alertas['error'][] = 'La nueva contraseña debe ser diferente a la contraseña actual';        }        return self::$alertas;    }    public function isUserRegistered(): bool    {        $query = "SELECT * FROM " . self::$tabla . " WHERE correo = '" . $this->correo . "' LIMIT 1";        $resultado = self::$db->query($query)->num_rows;        if ($resultado > 0) {            return true;        }        return false;    }    public function hashPassword(): void    {        $this->contrasena = password_hash($this->contrasena, PASSWORD_BCRYPT);    }    public function createToken(): void    {        $this->token = uniqid();    }    public function validarLoginInputs(): array    {        if (!$this->correo) {            self::$alertas["error"][] = "El correo es obligatorio";        }        if (!$this->contrasena) {            self::$alertas["error"][] = "La contraseña es obligatoria";        }        return self::$alertas;    }    public function comprobarPasswordAndVerificado($password): bool    {        $resultado = password_verify($password, $this->contrasena);        if (!$resultado || !$this->confirmado || $this->estado === "INA") {            return false;        } else {            return true;        }    }    public function comprobarTmpPassword($password): bool    {        $resultado = password_verify($password, $this->contrasena);        if (!$resultado) {            return false;        } else {            return true;        }    }}